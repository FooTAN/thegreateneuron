# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: checkIfShouldBuildDocker
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $changedfiles = git diff
          Write-Host $changedfiles
          If ($changedfiles -and $changedfiles.Contains("src/service/article"))  {
            echo "##vso[task.setvariable variable=IfRunDockerBuild;isOutput=true]run"
          }
  - job: DockerBuild
    displayName: Docker Build
    dependsOn: checkIfShouldBuildDocker
    condition: eq(dependencies.checkIfShouldBuildDocker.outputs['DetermineIfRunNextJob.IfRunDockerBuild'],'run')
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build client image
      inputs:
        containerRegistry: 'tgn_dockerhub'
        repository: 'footan/express_article_service'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/src/services/article/dockerfile'
        buildContext: '$(Build.SourcesDirectory)/src/services/article/'
        tags: |
          $(tag)

- stage: Provision
  displayName: 'terraforming'
  dependsOn: Build
  jobs:
    - job: Provision
      displayName: 'Provisioning Azure'
      pool:
        vmImage: ubuntu-latest
      variables:
        - group: terraform_env_vars
        - group: terraform_state_storage
        - group: cluster_config
        - group: rg_config
      steps:
      - script: |
          set -e
          cd '$(Build.SourcesDirectory)/infrastructure/terraform'
          terraform init -input=false -backend-config="resource_group_name=$(tfstate_resource_group_name)" -backend-config="storage_account_name=$(tfstate_storage_account_name)" -backend-config="container_name=$(tfstate_container_name)" -backend-config="key=terraform.tfstate"
          terraform apply -input=false -auto-approve
        name: 'shellingTerraform'
        displayName: 'Shelling Terraform'
        env:
          ARM_CLIENT_ID: $(TF_ENV_ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(TF_ENV_ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(TF_ENV_ARM_TENANT_ID)
          ARM_SUBSCRIPTION_ID: $(TF_ENV_ARM_SUBSCRIPTION_ID)
          TF_VAR_build_number: $(tag)
          TF_VAR_tfstate_container_name: $(tfstate_container_name)
          TF_VAR_tfstate_resource_group_name: $(tfstate_resource_group_name)
          TF_VAR_tfstate_storage_account_name: $(tfstate_storage_account_name)
          TF_VAR_cluster_node_count: $(cluster_node_count)
          TF_VAR_cluster_vm_size: $(cluster_vm_size)
          TF_VAR_cluster_name: $(cluster_name)
          TF_VAR_cluster_dns_prefix: $(cluster_dns_prefix)
          TF_VAR_rg_name: $(rg_name)
          TF_VAR_rg_location: $(rg_location)
- stage: Deploy
  displayName: 'Deploy to kubernetes'
  dependsOn: Provision
  jobs:
    - deployment: DeployArticleService
      displayName: 'Deploying Article Service'
      pool:
        vmImage: ubuntu-latest
      environment:
        name: 'thegreatneuron-dev'
      strategy:
        runOnce:
          deploy:
            steps:             
            - task: CmdLine@2
              inputs:
                script: |
                  echo "Test"
                  cd $(Pipeline.Workspace)
                  ls
            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: 'k8s_service_connection'
                manifests: '$(Pipeline.Workspace)/s/manifests/article-depl.yaml'
